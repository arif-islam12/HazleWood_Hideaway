<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAAHAAAABwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAACgAAABuAgIDoQQFCLgFBgi5AgMEpgAAAH4AAABHAAAAFAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAGgAA
        ADcAAABAAAAALQAAABwAAAB5Cw4U4h8oOv4vPVf/NkVk/zZGZP8xP1r/JTBF/xUcKPYHCQzMAAAAdQAA
        ABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAALwEC
        ApMKDRLYExkk8RYcKfYOEhrrAQID2hkgLvk8TW//SF2F/0lfiP9JXof/SF2G/0hdhv9IXYb/RVmA/zhI
        Z/8eJjf9BwkN0QAAAFsAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAA
        AGEKDRPhJjJH/zxOcP9EWH//RlqC/yQvQ/8XHiv/QlZ7/0hdhv8/Unb/LTtU/ztMbf9JX4j/Sl+J/0hd
        hv9HXIT/SF2F/0dbg/81RWP/Exkj9QEBApMAAAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIC
        AwAAAABgEhch8j1OcP9OZZD/TWOO/0hehv8/UXT/Exgj/zlKav9JXof/TmSP/y05Uv8ICAv/ERMb/yUv
        Q/9JXYX/U2qW/09lkP9LYYr/SF2F/0hdhv9BVHn/Hic4/gMDBa8AAAAdAAAAAAAAAAAAAAAAAAAAAAAA
        AABWbp0AUGeSCjRCXrJGWn//VWya/1RrmP9Uapf/TGGL/y47Vf8aIjH/SF2F/1Bnkv9VbJn/QlV4/xET
        HP8nJzj/Ghom/xUaJf9CVHf/VWya/1Rrl/9RZ5P/S2GK/0hdhv9FWYD/Ii1A/wMEBbEAAAAYAAAAAAAA
        AAAAAAAAAAAAAAAAABQYHiubUGaR9lVsmv9Ua5j/VGuY/1Nql/9LYIr/ISs9/yg0Sv9RaJT/VGuY/1Rr
        mP9UbJn/LTpS/xUVH/82Nk//IyIy/xIWH/9CVHj/VWya/1RrmP9Tapf/T2WQ/0leh/9FWYD/ICk7/wEB
        ApsAAAAKAAAAAAAAAAABAQEAAAAAaSApOv1SaZX/VGuY/1RrmP9Ua5j/U2qX/0hdhf8WHSn/M0Fd/1Vs
        mv9Ua5j/VGuY/1Rsmf9PZI//GR8t/yMjM/85OVT/IiIy/xYbJv9LX4f/VWyZ/1RrmP9Ua5j/UWiT/0pf
        if9CVnv/Fh0p+QAAAGkCAgMAAAAAAAAAABIGCAzBP1By/1Vsmv9Ua5j/VGuY/1RrmP9Tapf/Q1Z7/wwP
        Fv81RGD/VW2b/1RrmP9Ua5j/VGuY/1Vsmv8+T3D/ERMb/zMySv84OFL/GRkk/yUwRP9Tapf/VGuY/1Rr
        mP9Ua5j/UmiU/0tgiv85SWn/CQwR3AAAACkAAAAAAAAASBcdKvFQZpH/VGuY/1RrmP9Ua5j/VGuY/1Rs
        mf86Smr/AwQF/y46U/9VbZr/VGuY/1RrmP9Ua5j/VGuY/1Nqlv8iKz3/Hh4s/zk5VP8xMUj/ERMb/0JU
        d/9VbJr/VGuY/1RrmP9Ua5j/UWiU/0lfiP8kLkL/AAAAiwAAAAEAAACKKjZM/1Vsmv9Ua5j/VGuY/1Rr
        mP9Ua5j/VWya/yw5Uf8HBgn/ICk6/1Nql/9Ua5j/VGuY/1RrmP9Ua5j/VWya/0JUeP8RExz/MjJJ/zk5
        U/8eHSv/JS9D/1RrmP9Ua5j/VGuY/1RrmP9Ua5j/UGeT/z5Pcv8LDhTcAAAAKQMEBcE6Smn/VW2a/1Rr
        mP9Ua5j/VGuY/1RrmP9SaJT/GyIx/x4dK/8UGCL/S1+I/1Vsmf9Ua5j/VGuY/1RrmP9Ua5j/U2qW/yAo
        Of8hITH/OTlU/y8vRP8TFiD/SV6F/1Vsmf9Ua5j/VGuY/1RrmP9Ua5j/TGKM/x0lNvwAAABzCAoP5ERX
        e/9VbJr/VGuY/1RrmP9Ua5j/VWya/0RXfP8TFR//MzNK/xYWIP80Q1//VW2a/1RrmP9Ua5j/VGuY/1Rr
        mP9VbZr/O0xs/xMTHP81NU7/ODhS/xcXIv8vPFb/VWya/1RrmP9Ua5j/VGuY/1RrmP9Tapf/MD5Z/wEC
        A7gNEBf2Sl6F/1Vsmf9Ua5j/VGuY/1RrmP9VbJr/KzdO/yAgL/8+Plv/JiY4/xccKP9PZI7/VGyZ/1Rr
        mP9Ua5j/VGuY/1RrmP9QZpH/GiEu/yQkNP86OlT/Kyo+/xUZJP9MYYn/VWyZ/1RrmP9Ua5j/VGuY/1Vs
        mf9AUnX/BwkN5Q8TGv5MYIn/VGyZ/1RrmP9Ua5j/VGyZ/01jjP8WGyf/NjZP/0REY/8nJzr/BAUH/zA+
        WP9VbJr/VGuY/1RrmP9Ua5j/VGuY/1Vsmv88TW7/EBIa/zExR/84OFL/Fhch/y06U/9VbJn/VGuY/1Rr
        mP9Ua5j/VWyZ/0ldhP8MEBf6DhIZ/EtgiP9VbJn/VGuY/1RrmP9VbZr/PU1u/xcYI/9DQ2P/Q0Nk/xkZ
        Jf8eKDn/FBkk/0JUd/9VbJr/VGuY/1RrmP9Ua5j/VGuY/1Nql/8pNUr/FBUe/zU1Tv8tLUL/EhUe/0Za
        gP9VbJr/VGuY/1RrmP9VbJn/S2CI/w4SGv0LDhTwSFuC/1Vsmf9Ua5j/VGuY/1Vtmv8uO1P/IyM0/0dH
        aP83N1H/FRkk/0NWe/8sOVH/Fx0p/0lehf9VbJr/VGuY/1RrmP9Ua5j/VGyZ/1BmkP8hKjz/FRUf/zMz
        Sv8dHSv/ISo8/1Jplf9Ua5j/VGuY/1Vsmf9HWoD/Cg0S7QYIC9hBUnX/VWya/1RrmP9Ua5j/VWyZ/0dX
        fP8+P13/RkZo/yQjNP8oM0j/UWiU/0dchP8kLkL/GiEv/0pehv9VbJr/VGuY/1RrmP9Ua5j/VWyZ/09l
        j/8mMET/ERIb/yMiMv8QEBj/N0Zj/1Vsmf9Ua5j/VW2b/zhIZv8DAwXBAQEBrTRCXv9VbZv/VGuY/1Rr
        mP9Ua5j/O0hn/z8/Xv9CQmL/Fhci/z9Qcv9VbJr/T2aR/0Zagv8jLUH/GB4r/0RXfP9VbJr/VGuY/1Rr
        mP9Ua5j/VGyZ/1Jplf83R2X/Fxwo/wgIDP8eJjb/U2qX/1Rrmf9SaZX/HiY2+QAAAG0AAABwIiw+/FRr
        mP9Ua5j/VGuY/1Jplf8cIzH/NDNM/zk4U/8WGyf/TmON/1Rsmf9Ua5j/T2aR/0dcg/8pNUz/FBkk/zVD
        YP9RZ5P/VW2a/1RrmP9Ua5j/VGuY/1Vsmv9OY43/O0xs/0RWe/9UbJn/VWya/zRDX/8FBgm8AAAAFgAA
        AC8PFBziS1+I/1Vsmf9Ua5j/VGqX/x8oOP8vL0X/Kys//yIsPv9Ua5j/VGuY/1RrmP9Ua5j/UGaS/0lf
        iP8lMEX/AwQF7BsjMvc8TGz/UGWQ/1RrmP9UbJn/VWya/1Vtm/9Xbpz/Vm6c/1Fnkv8yQFv/CQwR1wAA
        ADcAAAAAAAAABQICA6AzQVz/VW2a/1RrmP9VbJr/KjZM/yMjNP8eHi3/M0Fc/1Vtm/9Ua5j/VGuY/1Rr
        mP9Ua5j/SF2F/xcdKvcAAABgAAAAWQUGCb0XHSrvRll+6UxhifhCVHj/RFd7/z9Rc/8xP1n/GSAt9wQF
        B7QAAAAzAAAAAAAAAAAAAAAAAAAAQBMYIu5MYYn/VWyZ/1Vtmv89Tm7/ExQd/xMUHf9BU3X/VWya/1Rr
        mP9Ua5j/VGuY/1RrmP8yQFz/BAUHvAAAAA8AAAAAAAAADQAAADU1Q18rHCMycAcIDMIICg7GBQYJuQEB
        ApIAAABNAAAADgAAAAAAAAAAAAAAAAAAAAAAAAAEAAEBkicyR/9Tapf/VWyZ/09lj/8XHSn/ERYf/01i
        i/9UbJn/VGuY/1RrmP9VbJr/RlqA/xAUHe8AAABKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACgAA
        AA0AAAAHAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcBQcKwTE+WP9Ua5f/VWya/0hb
        gv9FV3z/VGuY/1RrmP9Ua5j/VW2a/0xhiv8aIjD7AAAAfwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtBggLxio1
        S/9NYoz/Vm6c/1ZunP9VbJr/VW2b/1RrmP9DVXn/GB8s+AEBAY0AAAAMAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAiAgIDnBMZI/AtOVH/PU1u/0BSdP84SGb/Iy1A/goNE9sAAABqAAAACQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAHAAAAPQAAAYYEBQexBgcKugIDBKUAAABtAAAAIwAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAHAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////+H///8AP//AAA//AAAD/gAAAf4AAAD8AAAAeAAAADgAAAAwAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADgAAgB4AA
        fB/AAH//4AD///AB///4A////x////////8=
</value>
  </data>
</root>